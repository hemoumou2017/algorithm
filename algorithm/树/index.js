/**
 *   前端中的树： dom树  + css rule = render tree, 渲染 和 重绘
 *   计算机中的树： window中，一切的东西都是存储在硬盘上，通过某个硬盘的分区-分区上的特定的系统文件
 *
 *  树（Tree）：n(n>=0)个结点构成的有限集合，当n为0时，称为空树
 *  特点： 1.任何非空树中有且仅有一个结点没有前驱结点，这个结点就是根结点
 *        2.除根结点之外，其余的结点有且仅有一个直接的前驱结点
 *        3.包括根结点在内，每个结点可以有多个直接后继结点
 *        4.树形结构是一种具有提柜特性的数据结构
 *        5.树形结构的数据元素之间存在的关系是：一对多或者多对一的关系
 *
 *  树的术语：
 *    1.结点的度：结点所拥有的子树的个数
 *    2.树的度：树中结点度的最大值
 *    3.叶子（终端结点）：度为0的结点
 *    4.分支结点（非终端结点）：度不为0的结点。除根结点之外的分支结点统称为内部结点，根结点又称为开始结点
 *    5.子结点：结点的直接后驱（结点的子树的根）
 *    6.父结点：结点的直接前驱
 *    7.子孙结点
 *    8.兄弟结点：同一个父结点
 *    9.祖先结点
 *    10.路径：自上而下的通过每条边
 *    11.结点的层：根结点的层1，其余结点的层树等于父结点的层树加1
 *    12.树的深度（高度）：树中所有结点层树的最大值
 *
 *  树的存储结构
 *  1.计算机只能是顺序或者链式存储，所以树这样的结构是不能够直接存储的，要将其转换为顺序或者是链式存储
 *    双亲表示法：采用数组存储普通的树，其核心思想：顺序存储每个结点的同时，给每个结点附加一个记录其父结点位置的变量，存储的父结点的下标。
 *              实际操作的时候，就是自上往下，顺序去遍历一棵树，并为响应的域复制。优点：可以快速的获取任意结点的父结点的位置。缺点：如果要获取某个结点的子结点，遍历了多次
 *    孩子表示法：建立多个指针域，指向她的子结点的地址。也就是说，任何一个结点，都掌握它所有子结点的信息。数组➕链表来实现。顺序表=》数组，从树的
 *              根结点开始，使用数组依次存储树的各个结点，需要注意的是：孩子表示法会给各个结点配备一个链表，用于存储各结点的孩子结点位于数组中的位置，如果结点中无孩子结点，
 *              则该结点的链表为空链表
 *    孩子兄弟表示法：把普通的树转成二叉树：从树的根结点开始，依次用链表存储各个结点的孩子结点和兄弟结点
 *                 孩子指针域｜ 数据 ｜ 兄弟指针域
 *
 *  二叉树：如果说树中每个结点最多只能有两个子结点，这样的树我们称为二叉树。只有两个分叉的树。二叉树是n个结点（n>=0）的有限集合。如果
 *         这个集合是个空集，则称为空二叉树。
 *  二叉树特点：1.每个结点最多有两颗子树，=》二叉树不存在度大于2的结点
 *            2.左右子树是有序的，次序不能任意颠倒
 *            3.即使树中某个结点只有一颗子树，也要区分它是左右树
 *  满二叉树：在一颗二叉树中，所有的分支结点都存在左右子树，并且所有的叶子都在同一层上
 *          满二叉树叶子只能出现在最下一层，出现在其他层，不可能达成平衡，非叶子结点的度一定是2
 *
 *
 */
